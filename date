import React, { useState, useEffect } from "react";
import {
  add,
  sub,
  format,
  parseISO,
  isValid,
  differenceInDays,
  eachDayOfInterval,
  isMonday,
  isTuesday,
  isWednesday,
  isThursday,
  isFriday,
  getUnixTime
} from "date-fns";
import { zhCN } from "date-fns/locale";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem
} from "@/components/ui/select";

export default function DateTimeCalculator() {
  const [baseDate, setBaseDate] = useState("");
  const [amount, setAmount] = useState(0);
  const [unit, setUnit] = useState("days");
  const [direction, setDirection] = useState("add");
  const [result, setResult] = useState("");
  const [timestampResult, setTimestampResult] = useState("");

  const [dayOfWeekResult, setDayOfWeekResult] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [dateDiffResult, setDateDiffResult] = useState("");
  const [workdayDiffResult, setWorkdayDiffResult] = useState("");
  const [countdownTarget, setCountdownTarget] = useState("");
  const [countdownResult, setCountdownResult] = useState("");
  const [shareLink, setShareLink] = useState("");

  const handleCalculate = () => {
    const parsedDate = parseISO(baseDate);
    if (!isValid(parsedDate)) {
      setResult("请输入有效的日期格式，例如 2025-04-11");
      return;
    }
    const duration = { [unit]: parseInt(amount) };
    const newDate = direction === "add" ? add(parsedDate, duration) : sub(parsedDate, duration);
    setResult(format(newDate, "yyyy-MM-dd HH:mm:ss"));
    setTimestampResult(`Unix 时间戳：${getUnixTime(newDate)}`);
  };

  useEffect(() => {
    const parsed = parseISO(baseDate);
    if (isValid(parsed)) {
      setDayOfWeekResult(format(parsed, "EEEE", { locale: zhCN }));
    } else {
      setDayOfWeekResult("");
    }
  }, [baseDate]);

  const handleDateDiff = () => {
    const start = parseISO(startDate);
    const end = parseISO(endDate);
    if (!isValid(start) || !isValid(end)) {
      setDateDiffResult("请输入有效的起始和结束日期");
      return;
    }
    const diff = differenceInDays(end, start);
    setDateDiffResult(`相差 ${diff} 天`);

    const days = eachDayOfInterval({ start, end });
    const workdays = days.filter(
      (d) => isMonday(d) || isTuesday(d) || isWednesday(d) || isThursday(d) || isFriday(d)
    );
    setWorkdayDiffResult(`其中工作日共 ${workdays.length} 天`);
  };

  const handleCountdown = () => {
    const target = parseISO(countdownTarget);
    if (!isValid(target)) {
      setCountdownResult("请输入有效的目标日期");
      return;
    }
    const now = new Date();
    const diff = differenceInDays(target, now);
    setCountdownResult(`距离目标还有 ${diff} 天`);
    const encoded = encodeURIComponent(target.toISOString());
    setShareLink(`${window.location.origin}/?countdown=${encoded}`);
  };

  return (
    <div className="max-w-xl mx-auto mt-10 p-4 shadow-xl rounded-2xl bg-white space-y-8">
      <div>
        <h1 className="text-2xl font-bold mb-4">📅 日期时间计算器</h1>
        <div className="space-y-4">
          <Input type="date" value={baseDate} onChange={(e) => setBaseDate(e.target.value)} placeholder="选择起始日期" />
          <Input type="number" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder="请输入数量" />
          <Select value={unit} onValueChange={setUnit}>
            <SelectTrigger><SelectValue placeholder="选择单位" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="seconds">秒</SelectItem>
              <SelectItem value="minutes">分钟</SelectItem>
              <SelectItem value="hours">小时</SelectItem>
              <SelectItem value="days">天</SelectItem>
              <SelectItem value="weeks">周</SelectItem>
              <SelectItem value="months">月</SelectItem>
              <SelectItem value="years">年</SelectItem>
            </SelectContent>
          </Select>
          <Select value={direction} onValueChange={setDirection}>
            <SelectTrigger><SelectValue placeholder="选择方向" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="add">之后</SelectItem>
              <SelectItem value="sub">之前</SelectItem>
            </SelectContent>
          </Select>
          <Button className="w-full" onClick={handleCalculate}>计算</Button>
          {result && <div className="mt-2 text-lg font-semibold">结果：{result}</div>}
          {timestampResult && <div className="text-sm text-gray-500">{timestampResult}</div>}
        </div>
      </div>

      <div>
        <h2 className="text-xl font-bold mb-2">📆 查询星期几</h2>
        {dayOfWeekResult && <div className="mt-2">结果：{dayOfWeekResult}</div>}
      </div>

      <div>
        <h2 className="text-xl font-bold mb-2">📊 日期间隔计算</h2>
        <div className="space-y-2">
          <Input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} placeholder="开始日期" />
          <Input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} placeholder="结束日期" />
          <Button onClick={handleDateDiff}>计算间隔</Button>
          {dateDiffResult && <div className="mt-2">{dateDiffResult}</div>}
          {workdayDiffResult && <div className="mt-1 text-gray-600">{workdayDiffResult}</div>}
        </div>
      </div>

      <div>
        <h2 className="text-xl font-bold mb-2">⏳ 倒数计时器</h2>
        <Input type="date" value={countdownTarget} onChange={(e) => setCountdownTarget(e.target.value)} placeholder="目标日期" />
        <Button onClick={handleCountdown}>开始倒数</Button>
        {countdownResult && <div className="mt-2">{countdownResult}</div>}
        {shareLink && (
          <div className="mt-2 text-sm text-blue-600 underline">
            <a href={shareLink} target="_blank" rel="noopener noreferrer">分享倒数链接</a>
          </div>
        )}
      </div>
    </div>
  );
}
